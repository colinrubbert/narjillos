// Plugins

//plugins {
//  id "edu.sc.seis.macAppBundle" version "2.1.0"
//}

apply plugin: 'java'
apply plugin: 'application'     // loads also the 'distribution' plugin
apply plugin: 'eclipse'
apply plugin: 'idea'

///////
// Work in progress. This is not fully working yet. I can fix a
// distribution by manually adding the "config.yaml" file to the
// Contents directory inside the app. I should find a way to do
// this automatically.
// The current procedure is:
//   gradle createApp
//   (manually copy config.yaml, version and other files to <approot>/Content)
//   gradle createDmg
// This sucks of course. TODO: find a way to automate this.
//macAppBundle {
//    mainClassName = "org.nusco.narjillos.NarjillosRunner"
//    icon = "narjillos.icns"
//    bundleJRE = true
//    // the "best" way I've found to tell the app where it's starting from
//    javaExtras.put ('-Dnarjillos.home', '$APP_ROOT/Contents/')
//}
///////

// Basic Configuration

version = file('version').getText().trim()

sourceCompatibility = JavaVersion.VERSION_1_8

mainClassName = 'org.nusco.narjillos.NarjillosRunner'

applicationDefaultJvmArgs = ['-Xmx8g']

// Dependencies

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.google.code.gson:gson:2.3'
  compile 'commons-cli:commons-cli:1.2'
  compile 'org.yaml:snakeyaml:1.15'
  testCompile 'junit:junit:4.11'
}


// Programs

createProgramTask('narjillos', 'org.nusco.narjillos.NarjillosRunner', 'Runs Narjillos (same arguments as the \'narjillos\' script).')
createProgramTask('dnabrowser', 'org.nusco.narjillos.DNABrowserRunner', 'Runs the DNA Browser (pass it the *.germline filename).')
createProgramTask('lab', 'org.nusco.narjillos.Lab', 'Runs lab analysis (pass it the *.exp filename).')


// Tests

task(testPerformance, dependsOn: 'compileJava', type: JavaExec) {
  description = 'Runs performance test.'
  group = 'verification'
  main = 'org.nusco.narjillos.PerformanceTest'
  classpath = sourceSets.test.runtimeClasspath
}

task(testDeterministic, dependsOn: 'compileJava', type: JavaExec) {
  description = 'Runs the (slow) test that checks whether the system is deterministic.'
  group = 'verification'
  main = 'org.nusco.narjillos.DeterministicExperimentTest'
  classpath = sourceSets.test.runtimeClasspath
}

task testAll(dependsOn: ['testPerformance', 'test', 'testDeterministic']) {
  description = 'Runs all the tests, including the slow ones.'
  group = 'verification'
}


// Backlog Management

task(bl, dependsOn: 'build', type: JavaExec) {
  main = 'org.nusco.narjillos.Backlog'
  classpath = sourceSets.main.runtimeClasspath
  args commandLineArgsOr('all')
}

task(backlog, dependsOn: 'bl') {
  description = 'Prints the top of the backlog. Also aliased to \'bl\'.'
  group = 'development'
}


// Packaging

applicationDistribution.from(
    files(
        'version',
        'LICENSE',
        'README.md',
        'config.yaml'
    )
)

task createStartupScripts(dependsOn: 'installDist') {
  createScript('lab', 'org.nusco.narjillos.Lab')
  createScript('dnabrowser', 'org.nusco.narjillos.DNABrowserRunner')
}

task release(dependsOn: ['testAll', 'createStartupScripts', 'assemble']) {
  description = 'Runs all tests and packages a release.'
  group = 'distribution'
}

// Helpers

def createProgramTask(taskName, mainClassName, taskDescription) {
  tasks.create(name: taskName, type: JavaExec) {
    description = taskDescription
    group = 'programs'
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args commandLineArgsOr([])
    maxHeapSize '4g'
  }
}

def commandLineArgsOr(defaultArgs) {
  if(project.hasProperty('args') && project.getProperty('args').trim().length() > 0)
    return project.args.split('\\s+')
  else
    return defaultArgs
}

def createScript(name, mainClass) {
  def taskName = name + 'StartScript'
  tasks.create(name: taskName, type: CreateStartScripts) {
    outputDir = new File(buildDir, 'scripts')
    mainClassName = mainClass
    applicationName = name
    classpath = tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + configurations.runtime
    defaultJvmOpts = ['-Xmx8g']
  }

  tasks[taskName].dependsOn(project.jar)

  applicationDistribution.with {
    into('bin/') {
      from(tasks[taskName])
      fileMode = 0755
    }
  }
}
